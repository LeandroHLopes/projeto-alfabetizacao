import React, { useEffect, useState } from 'react'
import styled, { keyframes } from 'styled-components'
import { useParams, useNavigate } from 'react-router-dom'
import { useAudio } from '../components/AudioManager'
import { BackButton } from '../components/BackButton'
import { PhoneticCard } from '../components/PhoneticCard'
import { alphabet, vowels, consonants } from '../utils/phoneticData'

const pulse = keyframes`
  0% { transform: scale(1); }
  50% { transform: scale(1.05); }
  100% { transform: scale(1); }
`

const Container = styled.div`
  display: flex;
  flex-direction: column;
  align-items: center;
  min-height: 100vh;
  background: linear-gradient(135deg, #FFC3A0, #FFAFBD);
  padding: 20px;
  font-family: 'Comic Sans MS', cursive, sans-serif;
`

const Title = styled.h1`
  font-size: 3.5rem;
  color: white;
  text-shadow: 
    3px 3px 0 #FF6B6B,
    6px 6px 0 rgba(0, 0, 0, 0.2);
  margin: 2rem 0;
  text-align: center;
  animation: bounce 2s infinite;

  @keyframes bounce {
    0%, 100% { transform: translateY(0); }
    50% { transform: translateY(-10px); }
  }
`

const Grid = styled.div`
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax(180px, 1fr));
  gap: 1.5rem;
  max-width: 1200px;
  width: 100%;
  padding: 2rem;
`

const Section = styled.div`
  width: 100%;
  max-width: 1200px;
  margin: 2rem 0;
  background: rgba(255, 255, 255, 0.2);
  border-radius: 20px;
  padding: 2rem;
  box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
  backdrop-filter: blur(10px);
  transition: transform 0.3s ease;

  &:hover {
    transform: translateY(-5px);
  }

  h2 {
    color: white;
    font-size: 2.5rem;
    margin-bottom: 1.5rem;
    text-align: center;
    text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.3);
    position: relative;
    
    &:after {
      content: '';
      display: block;
      width: 100px;
      height: 4px;
      background: #FF6B6B;
      margin: 10px auto;
      border-radius: 2px;
    }
  }
`

const Card = styled.button`
  background-color: white;
  border: none;
  border-radius: 15px;
  padding: 1.5rem;
  font-size: 2rem;
  font-weight: bold;
  color: #333;
  cursor: pointer;
  transition: all 0.3s;
  box-shadow: 0 8px 15px rgba(0, 0, 0, 0.1);
  position: relative;
  overflow: hidden;

  &:before {
    content: '';
    position: absolute;
    top: 0;
    left: -100%;
    width: 100%;
    height: 100%;
    background: linear-gradient(
      120deg,
      transparent,
      rgba(255, 255, 255, 0.6),
      transparent
    );
    transition: 0.5s;
  }

  &:hover {
    transform: translateY(-5px) scale(1.05);
    box-shadow: 0 15px 25px rgba(0, 0, 0, 0.2);

    &:before {
      left: 100%;
    }
  }

  &:active {
    transform: scale(0.95);
  }

  &:disabled {
    opacity: 0.7;
    cursor: not-allowed;
  }
`

const SyllableGroup = styled.div`
  background: rgba(255, 255, 255, 0.9);
  border-radius: 15px;
  padding: 1rem;
  margin-bottom: 1rem;

  h3 {
    color: #333;
    margin-bottom: 1rem;
    text-align: center;
  }
`

const PhraseCard = styled(Card)`
  background: white;
  font-size: 1.8rem;
  width: 100%;
  text-align: left;
  padding: 2rem;
  margin: 1rem 0;
  display: flex;
  align-items: center;
  gap: 2rem;
  font-family: 'Comic Sans MS', cursive, sans-serif;
  border-left: 8px solid #FF6B6B;
  transition: all 0.3s ease;

  &:hover {
    border-left: 8px solid #FFB6B6;
    background: #FFF5F5;
  }

  &:active {
    transform: scale(0.99);
  }
`

const PhraseIcon = styled.span<{ $isActive: boolean }>`
  font-size: 2.5rem;
  opacity: ${props => props.$isActive ? 1 : 0.6};
  animation: ${props => props.$isActive ? pulse : 'none'} 1s infinite;
`

const PhraseText = styled.span`
  flex: 1;
  line-height: 1.4;
  color: #444;
`

const SoundIcon = styled.span<{ $isPlaying: boolean }>`
  font-size: 2rem;
  opacity: ${props => props.$isPlaying ? 1 : 0.6};
`

const silabasTranscricao = {
  'B': {
    silabas: ['BA', 'BE', 'BI', 'BO', 'BU'],
    fonetica: ['[ba]', '[b…õ]', '[bi]', '[b…î]', '[bu]']
  },
  'C': {
    silabas: ['CA', 'CE', 'CI', 'CO', 'CU'],
    fonetica: ['[ka]', '[s…õ]', '[si]', '[k…î]', '[ku]']
  },
  'D': {
    silabas: ['DA', 'DE', 'DI', 'DO', 'DU'],
    fonetica: ['[da]', '[d…õ]', '[d íi]', '[d…î]', '[du]']
  },
  'F': {
    silabas: ['FA', 'FE', 'FI', 'FO', 'FU'],
    fonetica: ['[fa]', '[f…õ]', '[fi]', '[f…î]', '[fu]']
  },
  'G': {
    silabas: ['GA', 'GE', 'GI', 'GO', 'GU'],
    fonetica: ['[ga]', '[ í…õ]', '[ íi]', '[g…î]', '[gu]']
  },
  'J': {
    silabas: ['JA', 'JE', 'JI', 'JO', 'JU'],
    fonetica: ['[ ía]', '[ í…õ]', '[ íi]', '[ í…î]', '[ íu]']
  },
  'L': {
    silabas: ['LA', 'LE', 'LI', 'LO', 'LU'],
    fonetica: ['[la]', '[l…õ]', '[li]', '[l…î]', '[lu]']
  },
  'M': {
    silabas: ['MA', 'ME', 'MI', 'MO', 'MU'],
    fonetica: ['[ma]', '[m…õ]', '[mi]', '[m…î]', '[mu]']
  },
  'N': {
    silabas: ['NA', 'NE', 'NI', 'NO', 'NU'],
    fonetica: ['[na]', '[n…õ]', '[ni]', '[n…î]', '[nu]']
  },
  'P': {
    silabas: ['PA', 'PE', 'PI', 'PO', 'PU'],
    fonetica: ['[pa]', '[p…õ]', '[pi]', '[p…î]', '[pu]']
  },
  'R': {
    silabas: ['RA', 'RE', 'RI', 'RO', 'RU'],
    fonetica: ['[ Åa]', '[ Å…õ]', '[ Åi]', '[ Å…î]', '[ Åu]']
  },
  'S': {
    silabas: ['SA', 'SE', 'SI', 'SO', 'SU'],
    fonetica: ['[sa]', '[s…õ]', '[si]', '[s…î]', '[su]']
  },
  'T': {
    silabas: ['TA', 'TE', 'TI', 'TO', 'TU'],
    fonetica: ['[ta]', '[t…õ]', '[t Éi]', '[t…î]', '[tu]']
  },
  'V': {
    silabas: ['VA', 'VE', 'VI', 'VO', 'VU'],
    fonetica: ['[va]', '[v…õ]', '[vi]', '[v…î]', '[vu]']
  },
  'X': {
    silabas: ['XA', 'XE', 'XI', 'XO', 'XU'],
    fonetica: ['[ Éa]', '[ É…õ]', '[ Éi]', '[ É…î]', '[ Éu]']
  },
  'Z': {
    silabas: ['ZA', 'ZE', 'ZI', 'ZO', 'ZU'],
    fonetica: ['[za]', '[z…õ]', '[zi]', '[z…î]', '[zu]']
  }
}

const palavrasComFonetica = {
  'A': {
    'ABACAXI': '[a.ba.ka. Éi]',
    'ABELHA': '[a.Ààbe. éa]',
    'AVI√ÉO': '[a.vi.Àà√£w]',
    '√ÅRVORE': '[Ààa Å.vo.…æi]',
    'AMIGO': '[a.Ààmi.gu]'
  },
  'B': {
    'BOLA': '[Ààb…î.la]',
    'BARCO': '[Ààba Å.ku]',
    'BONECA': '[bo.Ààn…õ.ka]',
    'BORBOLETA': '[bo Å.bo.Ààle.ta]',
    'BANANA': '[ba.Ààn√£.na]'
  },
  'C': {
    'CASA': '[Ààka.za]',
    'CARRO': '[Ààka. Åu]',
    'COELHO': '[ko.Ààe. éu]',
    'CACHORRO': '[ka.Àà Éo. Åu]',
    'CHUVA': '[Àà Éu.va]'
  },
  'D': {
    'DADO': '[Ààda.du]',
    'DENTE': '[Ààd·∫Ω.t Éi]',
    'DOCE': '[Ààdo.si]',
    'DRAG√ÉO': '[d…æa.Ààg√£w]',
    'DAN√áAR': '[d√£.Ààsa Å]'
  },
  'E': {
    'ESCOLA': '[is.Ààk…î.la]',
    'ESTRELA': '[is.Ààt…æe.la]',
    'ELEFANTE': '[e.le.Ààf√£.t Éi]',
    'ESPELHO': '[is.Ààpe. éu]',
    'ESCADA': '[is.Ààka.da]'
  },
  'F': {
    'FADA': '[Ààfa.da]',
    'FLOR': '[Ààflo Å]',
    'FOGO': '[Ààfo.gu]',
    'FORMIGA': '[fo Å.Ààmi.ga]',
    'FESTA': '[Ààf…õs.ta]'
  },
  'G': {
    'GATO': '[Ààga.tu]',
    'GIRAFA': '[ íi.Àà…æa.fa]',
    'GELADO': '[ íe.Ààla.du]',
    'GALINHA': '[ga.Ààlƒ©.…≤a]',
    'GUITARRA': '[gi.Ààta. Åa]'
  },
  'I': {
    'ILHA': '[Àài. éa]',
    'IGREJA': '[i.Ààg…æe. ía]',
    '√çNDIO': '[Ààƒ©.d íiu]',
    'IRM√ÉO': '[i Å.Ààm√£w]',
    'IGUANA': '[i.gu.Àà√£.na]'
  },
  'J': {
    'JANELA': '[ ía.Ààn…õ.la]',
    'JACAR√â': '[ ía.ka.Àà…æ…õ]',
    'JOGO': '[Àà ío.gu]',
    'JARDIM': '[ ía Å.Ààd íƒ©]',
    'JOELHO': '[ ío.Ààe. éu]'
  },
  'L': {
    'LE√ÉO': '[le.Àà√£w]',
    'LIVRO': '[Ààli.v…æu]',
    'LOBO': '[Ààlo.bu]',
    'L√ÅPIS': '[Ààla.pis]',
    'LUA': '[Ààlu.a]'
  },
  'M': {
    'MALA': '[Ààma.la]',
    'MACACO': '[ma.Ààka.ku]',
    'MENINA': '[me.Ààni.na]',
    'M√öSICA': '[Ààmu.zi.ka]',
    'MA√á√É': '[ma.Ààs√£]'
  },
  'N': {
    'NAVIO': '[na.Ààvi.u]',
    'NUVEM': '[Àànu.v·∫Ωj]',
    'NEVE': '[Ààn…õ.vi]',
    'NARIZ': '[na.Àà…æis]',
    'NOITE': '[Àànoj.t Éi]'
  },
  'O': {
    '√ìCULOS': '[Àà…î.ku.lus]',
    'OVELHA': '[o.Ààve. éa]',
    'ONDA': '[Àà√µ.da]',
    'OLHO': '[Àào. éu]',
    'OURO': '[Ààow.…æu]'
  },
  'P': {
    'PATO': '[Ààpa.tu]',
    'PEIXE': '[Ààpej. Éi]',
    'PORTA': '[Ààp…î Å.ta]',
    'PALHA√áO': '[pa.Àà éa.su]',
    'P√ÅSSARO': '[Ààpa.sa.…æu]'
  },
  'Q': {
    'QUEIJO': '[Ààkej. íu]',
    'QUADRO': '[Ààkwa.d…æu]',
    'QUENTE': '[Ààk·∫Ω.t Éi]',
    'QUINTAL': '[kƒ©.Ààtaw]',
    'QUATRO': '[Ààkwa.t…æu]'
  },
  'R': {
    'RATO': '[Àà Åa.tu]',
    'ROSA': '[Àà Å…î.za]',
    'RODA': '[Àà Å…î.da]',
    'REL√ìGIO': '[ Åe.Ààl…î. íiu]',
    'R√ÅDIO': '[Àà Åa.d íiu]'
  },
  'S': {
    'SAPO': '[Ààsa.pu]',
    'SAPATO': '[sa.Ààpa.tu]',
    'SOL': '[Ààs…îw]',
    'SORRISO': '[so.Àà Åi.zu]',
    'SORVETE': '[so Å.Ààve.t Éi]'
  },
  'T': {
    'TATU': '[ta.Ààtu]',
    'TREM': '[Ààt…æ·∫Ωj]',
    'TIGRE': '[Ààt Éi.g…æi]',
    'TELEFONE': '[te.le.Ààf√µ.ni]',
    'TARTARUGA': '[ta Å.ta.Àà…æu.ga]'
  },
  'U': {
    'UVA': '[Ààu.va]',
    'URSO': '[Ààu Å.su]',
    'UNHA': '[Àà≈©.…≤a]',
    'UNIVERSO': '[u.ni.Ààv…õ Å.su]',
    'URUBU': '[u.…æu.Ààbu]'
  },
  'V': {
    'VACA': '[Ààva.ka]',
    'VELA': '[Ààv…õ.la]',
    'VIOL√ÉO': '[vi.o.Ààl√£w]',
    'VASSOURA': '[va.Ààso.…æa]',
    'VERDE': '[Ààve Å.d íi]'
  },
  'X': {
    'X√çCARA': '[Àà Éi.ka.…æa]',
    'XAMPU': '[ É√£.Ààpu]',
    'XERIFE': '[ Ée.Àà…æi.fi]',
    'XADREZ': '[ Éa.Ààd…æes]',
    'XAROPE': '[ Éa.Àà…æ…î.pi]'
  },
  'Z': {
    'ZEBRA': '[Ààze.b…æa]',
    'ZERO': '[Ààz…õ.…æu]',
    'ZOOL√ìGICO': '[zo.o.Ààl…î. íi.ku]',
    'ZANGADO': '[z√£.Ààga.du]',
    'ZINCO': '[Ààzƒ©.ku]'
  }
}

const frases = [
  {
    texto: 'O GATO BEBE LEITE',
    icone: 'üê±'
  },
  {
    texto: 'A CASA √â BONITA',
    icone: 'üè†'
  },
  {
    texto: 'O SAPO PULA ALTO',
    icone: 'üê∏'
  },
  {
    texto: 'A BOLA √â AZUL',
    icone: '‚öΩ'
  },
  {
    texto: 'O C√âU TEM NUVENS',
    icone: '‚òÅÔ∏è'
  },
  {
    texto: 'A MENINA L√ä O LIVRO',
    icone: 'üìö'
  },
  {
    texto: 'O CACHORRO LATE FORTE',
    icone: 'üêï'
  },
  {
    texto: 'A BORBOLETA VOA NO JARDIM',
    icone: 'ü¶ã'
  },
  {
    texto: 'O P√ÅSSARO FAZ SEU NINHO',
    icone: 'üê¶'
  },
  {
    texto: 'A FLOR √â VERMELHA',
    icone: 'üåπ'
  },
  {
    texto: 'O COELHO COME CENOURA',
    icone: 'üê∞'
  },
  {
    texto: 'A PROFESSORA ENSINA BEM',
    icone: 'üë©‚Äçüè´'
  },
  {
    texto: 'O SOL BRILHA NO C√âU',
    icone: '‚òÄÔ∏è'
  },
  {
    texto: 'A CHUVA CAI DEVAGAR',
    icone: 'üåßÔ∏è'
  },
  {
    texto: 'O PEIXE NADA NO MAR',
    icone: 'üê†'
  },
  {
    texto: 'A ABELHA FAZ MEL',
    icone: 'üêù'
  }
]

const backgrounds = {
  letras: 'linear-gradient(135deg, #6e8efb, #a777e3)',
  silabas: 'linear-gradient(135deg, #FF9A9E, #FAD0C4)',
  palavras: 'linear-gradient(135deg, #A8E6CF, #DCEDC1)',
  frases: 'linear-gradient(135deg, #FFD1FF, #FAD0C4)'
}

export function Game() {
  const { level } = useParams<{ level: string }>()
  const navigate = useNavigate()
  const { playAudio, isPlaying } = useAudio()
  const [currentItem, setCurrentItem] = useState<string | null>(null)

  useEffect(() => {
    if (level) {
      const messages = {
        letras: 'Clique nas letras para ouvir sua pron√∫ncia',
        silabas: 'Vamos aprender as s√≠labas! Clique para ouvir',
        palavras: 'Clique nas palavras para aprender a ler',
        frases: 'Pratique a leitura de frases completas'
      }
      playAudio(messages[level as keyof typeof messages])
    }
  }, [level, playAudio])

  const handleClick = (item: string) => {
    if (!isPlaying) {
      setCurrentItem(item)
      playAudio(item)
    }
  }

  const renderLetters = () => (
    <>
      <Section>
        <h2>Alfabeto</h2>
        <Grid>
          {Object.entries(alphabet).map(([key, value]) => (
            <PhoneticCard
              key={key}
              letter={key}
              name={value.name}
              phonetic={value.phonetic}
              onClick={() => handleClick(key)}
              isPlaying={isPlaying}
              isActive={currentItem === key}
            />
          ))}
        </Grid>
      </Section>

      <Section>
        <h2>Vogais Orais</h2>
        <Grid>
          {Object.entries(vowels.oral).map(([key, value]) => (
            <PhoneticCard
              key={key}
              letter={key}
              phonetic={value.sound}
              example={value.example}
              onClick={() => handleClick(key)}
              isPlaying={isPlaying}
              isActive={currentItem === key}
            />
          ))}
        </Grid>
      </Section>

      <Section>
        <h2>Vogais Nasais</h2>
        <Grid>
          {Object.entries(vowels.nasal).map(([key, value]) => (
            <PhoneticCard
              key={key}
              letter={key}
              phonetic={value.sound}
              example={value.example}
              onClick={() => handleClick(key)}
              isPlaying={isPlaying}
              isActive={currentItem === key}
            />
          ))}
        </Grid>
      </Section>

      <Section>
        <h2>Consoantes</h2>
        <Grid>
          {Object.entries(consonants).map(([key, value]) => (
            <PhoneticCard
              key={key}
              letter={key}
              phonetic={value.sound}
              example={value.example}
              onClick={() => handleClick(key)}
              isPlaying={isPlaying}
              isActive={currentItem === key}
            />
          ))}
        </Grid>
      </Section>
    </>
  )

  const renderSyllables = () => (
    <>
      {Object.entries(silabasTranscricao).map(([consoante, dados]) => (
        <Section key={consoante}>
          <h2>S√≠labas com {consoante}</h2>
          <Grid>
            {dados.silabas.map((silaba, index) => (
              <PhoneticCard
                key={silaba}
                letter={silaba}
                phonetic={dados.fonetica[index]}
                example={`${silaba}la`}
                onClick={() => handleClick(silaba)}
                isPlaying={isPlaying}
                isActive={currentItem === silaba}
              />
            ))}
          </Grid>
        </Section>
      ))}
    </>
  )

  const renderWords = () => (
    <>
      {Object.entries(palavrasComFonetica).map(([letra, palavras]) => (
        <Section key={letra}>
          <h2>Palavras com {letra}</h2>
          <Grid>
            {Object.entries(palavras).map(([palavra, fonetica]) => (
              <PhoneticCard
                key={palavra}
                letter={palavra}
                phonetic={fonetica}
                example={palavra.toLowerCase()}
                onClick={() => handleClick(palavra)}
                isPlaying={isPlaying}
                isActive={currentItem === palavra}
              />
            ))}
          </Grid>
        </Section>
      ))}
    </>
  )

  const renderContent = () => {
    switch (level) {
      case 'letras':
        return renderLetters()
      case 'silabas':
        return renderSyllables()
      case 'palavras':
        return renderWords()
      case 'frases':
        return (
          <Section>
            <h2>Frases para Praticar</h2>
            <div style={{ maxWidth: '800px', margin: '0 auto' }}>
              {frases.map(({ texto, icone }) => (
                <PhraseCard
                  key={texto}
                  onClick={() => handleClick(texto)}
                  disabled={isPlaying}
                >
                  <PhraseIcon $isActive={currentItem === texto}>
                    {icone}
                  </PhraseIcon>
                  <PhraseText>
                    {texto}
                  </PhraseText>
                  <SoundIcon $isPlaying={currentItem === texto}>
                    üîä
                  </SoundIcon>
                </PhraseCard>
              ))}
            </div>
          </Section>
        )
      default:
        return null
    }
  }

  return (
    <Container>
      <BackButton to="/levels" message="Voltando para a sele√ß√£o de n√≠veis" />
      <Title>
        {level === 'letras' && 'Alfabeto e Sons'}
        {level === 'silabas' && 'Vogais e Sons'}
        {level === 'palavras' && 'Consoantes e Sons'}
        {level === 'frases' && 'Frases'}
      </Title>
      {renderContent()}
    </Container>
  )
} 